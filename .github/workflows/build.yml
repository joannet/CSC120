name: CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 2  # Ensure we fetch the previous commit

      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'

      - name: Detect modified files and run tests
        run: |
          # Check if there is a previous commit
          if [ $(git rev-list --count HEAD) -gt 1 ]; then
            echo "Previous commit found. Checking for modified files."
            MODIFIED_FILES=$(git diff --name-only HEAD~1)
          else
            # Handle the case where there is no previous commit
            echo "No previous commit found. Listing all files."
            MODIFIED_FILES=$(git ls-files)
          fi

          echo "Modified files: $MODIFIED_FILES"

          # Filter out workflow files
          NON_WORKFLOW_FILES=$(echo "$MODIFIED_FILES" | grep -vE '^\.github/' || true)

          echo "Non-workflow files: $NON_WORKFLOW_FILES"

          if [ -z "$NON_WORKFLOW_FILES" ]; then
            echo "Only workflow files modified, skipping tests."
            exit 0  # Exit with success
          fi

          # Extract modified modules
          MODIFIED_MODULES=$(echo "$NON_WORKFLOW_FILES" | grep '^Lab' | cut -d '/' -f 1 | sort -u || true)

          echo "Modified modules: $MODIFIED_MODULES"

          if [ -z "$MODIFIED_MODULES" ]; then
            echo "No relevant files modified."
            exit 0  # Exit with success
          fi

          for module in $MODIFIED_MODULES; do
            echo "Running tests for $module"
            mvn clean test -pl $module -am || true  # Continue even if tests fail

      - name: Display test results
        if: always()
        run: |
          for module in $(ls -d Lab*/); do
            if [ -d $module/target/surefire-reports ]; then
              echo "Test results for $module:"
              cat $module/target/surefire-reports/*.txt
            fi
          done

      - name: Create annotations for test failures
        if: always()
        run: |
          for module in $(ls -d Lab*/); do
            if [ -d $module/target/surefire-reports ]; then
              for file in $module/target/surefire-reports/*.txt; do
                if grep -q 'FAILURE' "$file"; then
                  echo "::error file=${{ github.workspace }}/$file::$(grep 'FAILURE' "$file")"
                fi
              done
            fi
          done
